using Kros.KORM.Converter;
using Kros.KORM.Injection;
using System;
using System.Linq.Expressions;

namespace Kros.KORM.Metadata
{
    /// <summary>
    /// Internal model mapper interface for fluent configuration.
    /// </summary>
    internal interface IModelMapperInternal
    {
        /// <summary>
        /// Sets table name for <typeparamref name="TEntity"/>.
        /// </summary>
        /// <typeparam name="TEntity">Entity type.</typeparam>
        /// <param name="tableName">Database table name.</param>
        void SetTableName<TEntity>(string tableName) where TEntity : class;

        /// <summary>
        /// Set default query filter which will be used in every query to table <paramref name="tableName"/>.
        /// </summary>
        /// <param name="tableName">Table name.</param>
        /// <param name="queryFilter">The query filter.</param>
        void SetQueryFilter(string tableName, Expression queryFilter);

        /// <summary>
        /// Sets column name for specific property.
        /// </summary>
        /// <typeparam name="TEntity">Entity type.</typeparam>
        /// <param name="propertyName">Property name.</param>
        /// <param name="columnName">Database column name.</param>
        void SetColumnName<TEntity>(string propertyName, string columnName) where TEntity : class;

        /// <summary>
        /// Sets no map flag for property <paramref name="propertyName"/>.
        /// </summary>
        /// <typeparam name="TEntity">Entity type.</typeparam>
        /// <param name="propertyName">Property name.</param>
        void SetNoMap<TEntity>(string propertyName) where TEntity : class;

        /// <summary>
        /// Sets converter for specific property.
        /// </summary>
        /// <typeparam name="TEntity">Entity type.</typeparam>
        /// <param name="propertyName">Property name.</param>
        /// <param name="converter">Converter.</param>
        void SetConverter<TEntity>(string propertyName, IConverter converter) where TEntity : class;

        /// <summary>
        /// Sets converter <paramref name="converter"/> for all properties of type <paramref name="propertyType"/>.
        /// </summary>
        /// <typeparam name="TEntity">Entity type.</typeparam>
        /// <param name="propertyType">Type of properties.</param>
        /// <param name="converter">Converter.</param>
        void SetConverterForProperties<TEntity>(Type propertyType, IConverter converter) where TEntity : class;

        /// <summary>
        /// Sets value generator <paramref name="valueGenerator"/> for specific property <paramref name="propertyName"/>.
        /// </summary>
        /// <typeparam name="TEntity">Entity type.</typeparam>
        /// <param name="propertyName">Property name.</param>
        /// <param name="valueGenerator">Value generator.</param>
        /// <param name="valueGenerated">Indicates when a value for a property will be generated by the database.</param>
        void SetValueGenerator<TEntity>(string propertyName, IValueGenerator valueGenerator, ValueGenerated valueGenerated) where TEntity : class;

        /// <summary>
        /// Sets injector for <typeparamref name="TEntity"/>.
        /// </summary>
        /// <typeparam name="TEntity">Entity type.</typeparam>
        /// <param name="injector">Injector.</param>
        void SetInjector<TEntity>(IInjector injector) where TEntity : class;

        /// <summary>
        /// Sets primary key for entity <typeparamref name="TEntity"/>.
        /// </summary>
        /// <typeparam name="TEntity">Entity type.</typeparam>
        /// <param name="propertyName">Property name, which represent primary key.</param>
        /// <param name="autoIncrementType">Autoincrement method type.</param>
        /// <param name="generatorName">Name of the ID generator for column.</param>
        void SetPrimaryKey<TEntity>(
            string propertyName,
            AutoIncrementMethodType autoIncrementType,
            string generatorName) where TEntity : class;

        /// <summary>
        /// Use delimieters for identifiers in the generated query.
        /// </summary>
        /// <param name="delimiters">The delimiters.</param>
        void UseIdentifierDelimiters(Delimiters delimiters);
    }
}
