<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BinaryOperatorIsNotSupported" xml:space="preserve">
    <value>The binary operator '{0}' is not supported.</value>
  </data>
  <data name="CannotCallMethod" xml:space="preserve">
    <value>Can't call '{0}' if you configured column name or converter.</value>
    <comment>0 - method name</comment>
  </data>
  <data name="CannotCallMultipleTime" xml:space="preserve">
    <value>Can't call multiple time method '{0}'.</value>
    <comment>0 - method name</comment>
  </data>
  <data name="CannotConfigureAnythingElse" xml:space="preserve">
    <value>You cannot configure anything else if you are call '{0}' or '{1}'</value>
  </data>
  <data name="CannotMaterializeSourceValue" xml:space="preserve">
    <value>Can't materialize source value type '{0}' to destination type '{1}' without defined converter.</value>
  </data>
  <data name="CannotOpenConnectionWhenGeneratingPrimaryKeys" xml:space="preserve">
    <value>There was a failure to open the database connection at the time the primary keys are generated. Try add 'Persist Security Info=TRUE' to the connection string.</value>
  </data>
  <data name="CompositePrimaryKeyCanNotHaveAutoIncrementColumn" xml:space="preserve">
    <value>Primary key of the model is composite. All of its columns must have {0} set to {1}.</value>
  </data>
  <data name="CompositePrimaryKeyMustHaveOrderedColumns" xml:space="preserve">
    <value>Primary key of the model is composite. All of its columns must have unique order.</value>
  </data>
  <data name="CompositePrimaryKeyMustHaveSameNameInAllColumns" xml:space="preserve">
    <value>Primary key of the model is composite. The name of the key must be the same for all its columns.</value>
  </data>
  <data name="ConfigurationIsNotAllowed" xml:space="preserve">
    <value>The configuration is not allowed if the Build method has already been called.</value>
  </data>
  <data name="ConstantIsNotSupported" xml:space="preserve">
    <value>The constant for '{0}' is not supported.</value>
  </data>
  <data name="ConverterTypeIsNotIConverter" xml:space="preserve">
    <value>Converter type must implement implement IConverter interface.</value>
  </data>
  <data name="ExistingItemCannotBeAdded" xml:space="preserve">
    <value>Cannot add item (hash code = {0}). This item already exists in collection {1}.</value>
  </data>
  <data name="ExistingItemCannotBeDeleted" xml:space="preserve">
    <value>Cannot delete item (hash code = {0}). This item already exists in collection {1}.</value>
  </data>
  <data name="ExistingItemCannotBeEdited" xml:space="preserve">
    <value>Cannot edit item (hash code = {0}). This item already exists in collection {1}.</value>
  </data>
  <data name="ExpressionCanBeAppliedOnlyOnce" xml:space="preserve">
    <value>{0} can be applied only once.</value>
  </data>
  <data name="InvalidPrimaryKeyForBulkUpdate" xml:space="preserve">
    <value>Table {0} has none, or composite primary key. Primary key must be one column only.</value>
  </data>
  <data name="LimitOffsetDataReaderInnerReaderAlreadySet" xml:space="preserve">
    <value>Inner reader is already set. It can be set only once.</value>
  </data>
  <data name="MemberIsNotSupported" xml:space="preserve">
    <value>The member '{0}' is not supported.</value>
  </data>
  <data name="MethodIsNotSupported" xml:space="preserve">
    <value>The method '{0}' is not supported.</value>
  </data>
  <data name="MethodNotSupportedForCompositePrimaryKey" xml:space="preserve">
    <value>Method {0} is not supported when entity has composite primary key.</value>
  </data>
  <data name="MethodNotSupportedWhenNoPrimaryKey" xml:space="preserve">
    <value>Method {0} is not supported when entity does not have primary key.</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="MigrationsHistoryTableScript" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\resources\migrationshistorytablescript.sql;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;utf-8</value>
  </data>
  <data name="MissongMethodInModelBuilder" xml:space="preserve">
    <value>ModelBuilder instance ({0}) does not have method {1}({2}).</value>
  </data>
  <data name="MoreParametersThanValues" xml:space="preserve">
    <value>Cannot execute query. There are more parameters than values in the query.</value>
  </data>
  <data name="MoreValuesThanParameters" xml:space="preserve">
    <value>Cannot execute query. There are more values than parameters in the query.</value>
  </data>
  <data name="NestedTransactionCommandTimeoutIsReadonly" xml:space="preserve">
    <value>Property NestedTransaction.CommandTimeout is readonly.</value>
  </data>
  <data name="NoInjectionConfigurationForProperty" xml:space="preserve">
    <value>Injection configuration for property '{0}' does not exist.</value>
  </data>
  <data name="NonGenericExecuteNotSupported" xml:space="preserve">
    <value>Executing a non generic result is not supported.</value>
  </data>
  <data name="NonGenericQueryNotSupported" xml:space="preserve">
    <value>Creating a non generic query is not supported.</value>
  </data>
  <data name="NullAndTrimStringConverter_InvalidArguments" xml:space="preserve">
    <value>At least one of arguments {0} and {1} must be true, otherwise the use of this converter makes no sense.</value>
    <comment>0, 1 - argument names</comment>
  </data>
  <data name="ParameterDataTypeNotSet" xml:space="preserve">
    <value>Data type of the parameter must be set, when its value is NULL. Parameter name: {0}.</value>
  </data>
  <data name="ProviderDoesNotSupportIdentity" xml:space="preserve">
    <value>The provider '{0}' does not support inserting values into table which model '{1}' has set primary key as Identity.</value>
  </data>
  <data name="QueryGeneratorMethodNotSupported" xml:space="preserve">
    <value>The method '{0}' is not supported.</value>
  </data>
  <data name="QueryProviderCouldNotGetDataTypeForColumn" xml:space="preserve">
    <value>Could not get data type for column [{0}].[{1}]. Column [{1}] does not exist in table [{0}].</value>
  </data>
  <data name="QueryProviderCouldNotGetTableSchema" xml:space="preserve">
    <value>Could not get schema for table [{0}]. Table does not exists.</value>
  </data>
  <data name="QueryProviderFactoryNotRegisteredForConnection" xml:space="preserve">
    <value>QueryProviderFactory for connection type '{0}' is not registered.</value>
  </data>
  <data name="QueryProviderFactoryNotRegisteredForProvider" xml:space="preserve">
    <value>QueryProviderFactory for provider '{0}' is not registered.</value>
  </data>
  <data name="ResultMustBeGenericIEnumerable" xml:space="preserve">
    <value>Result type must be generic type IEnumerable&lt;T&gt;.</value>
  </data>
  <data name="ScriptDoesNotExist" xml:space="preserve">
    <value>Script '{0}' doesn't exist in assembly '{1}'.</value>
  </data>
  <data name="SkipWithoutOrderByInQuery" xml:space="preserve">
    <value>When Skip method is used, OrderBy must be specified.</value>
  </data>
  <data name="ThisCallOfSkipMethodIsNotSupported" xml:space="preserve">
    <value>This call of Skip() method is not supported.</value>
  </data>
  <data name="ThisCallOfTakeMethodIsNotSupported" xml:space="preserve">
    <value>This call of Take() method is not supported.</value>
  </data>
  <data name="ThrowHelper_ColumnMappingAlreadyConfigured" xml:space="preserve">
    <value>Trying to set column mapping "{0}" for property "{1}" of entity "{2}". Column mapping is already set as "{3}".</value>
    <comment>0 - column name
1 - property name
2 - entity type name
3 - column name</comment>
  </data>
  <data name="ThrowHelper_ConverterAlreadyConfigured" xml:space="preserve">
    <value>Trying to set converter "{0}" for property "{1}" of entity "{2}". Converter is already set as "{3}".</value>
    <comment>0 - converter full name
1 - property name
2 - entity type name
3 - converter full name</comment>
  </data>
  <data name="ThrowHelper_ConverterForTypeAlreadyConfigured" xml:space="preserve">
    <value>Trying to set converter "{0}" for properties of type "{1}" of entity "{2}". Converter is already set as "{3}".</value>
    <comment>0 - converter full name
1 - property type name
2 - entity type name
3 - converter full name</comment>
  </data>
  <data name="ThrowHelper_PropertyAlreadyConfigured" xml:space="preserve">
    <value>Property "{0}" of entity "{1}" was already configured.</value>
    <comment>0 - property name
1 - entity type name</comment>
  </data>
  <data name="TypeMustBeEnumType" xml:space="preserve">
    <value>Type must be Enum type.</value>
  </data>
  <data name="UnaryOperatorIsNotSupported" xml:space="preserve">
    <value>The unary operator '{0}' is not supported.</value>
  </data>
  <data name="UseConnectionCanBeCallOnlyOne" xml:space="preserve">
    <value>Method '{0}' can be call only one time.</value>
  </data>
  <data name="UseConnectionMustBeCall" xml:space="preserve">
    <value>Method '{0}' must be call before '{1}'</value>
  </data>
</root>